"""autogenerated by genpy from skeleton_markers/skeleton_listenerRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class skeleton_listenerRequest(genpy.Message):
  _md5sum = "3e922e898a4b808400fdf8dd80e96d0c"
  _type = "skeleton_markers/skeleton_listenerRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string gesture
int64 randomArr
int64 randomGes

"""
  __slots__ = ['gesture','randomArr','randomGes']
  _slot_types = ['string','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gesture,randomArr,randomGes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(skeleton_listenerRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gesture is None:
        self.gesture = ''
      if self.randomArr is None:
        self.randomArr = 0
      if self.randomGes is None:
        self.randomGes = 0
    else:
      self.gesture = ''
      self.randomArr = 0
      self.randomGes = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.gesture
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2q.pack(_x.randomArr, _x.randomGes))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gesture = str[start:end].decode('utf-8')
      else:
        self.gesture = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.randomArr, _x.randomGes,) = _struct_2q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.gesture
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2q.pack(_x.randomArr, _x.randomGes))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gesture = str[start:end].decode('utf-8')
      else:
        self.gesture = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.randomArr, _x.randomGes,) = _struct_2q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2q = struct.Struct("<2q")
"""autogenerated by genpy from skeleton_markers/skeleton_listenerResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class skeleton_listenerResponse(genpy.Message):
  _md5sum = "24842bc754e0f5cc982338eca1269251"
  _type = "skeleton_markers/skeleton_listenerResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool flag


"""
  __slots__ = ['flag']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(skeleton_listenerResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.flag is None:
        self.flag = False
    else:
      self.flag = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.flag))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.flag,) = _struct_B.unpack(str[start:end])
      self.flag = bool(self.flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.flag))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.flag,) = _struct_B.unpack(str[start:end])
      self.flag = bool(self.flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class skeleton_listener(object):
  _type          = 'skeleton_markers/skeleton_listener'
  _md5sum = '82259b27ffa827b1104afbd12972f9e7'
  _request_class  = skeleton_listenerRequest
  _response_class = skeleton_listenerResponse
