/* Auto-generated by genmsg_cpp for file /home/fri/ros/rosbuild_ws/GestureRecognition/skeleton_markers/srv/skeleton_listener.srv */
#ifndef SKELETON_MARKERS_SERVICE_SKELETON_LISTENER_H
#define SKELETON_MARKERS_SERVICE_SKELETON_LISTENER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace skeleton_markers
{
template <class ContainerAllocator>
struct skeleton_listenerRequest_ {
  typedef skeleton_listenerRequest_<ContainerAllocator> Type;

  skeleton_listenerRequest_()
  : gesture()
  , randomArr(0)
  , randomGes(0)
  {
  }

  skeleton_listenerRequest_(const ContainerAllocator& _alloc)
  : gesture(_alloc)
  , randomArr(0)
  , randomGes(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gesture_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gesture;

  typedef int64_t _randomArr_type;
  int64_t randomArr;

  typedef int64_t _randomGes_type;
  int64_t randomGes;


  typedef boost::shared_ptr< ::skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skeleton_markers::skeleton_listenerRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct skeleton_listenerRequest
typedef  ::skeleton_markers::skeleton_listenerRequest_<std::allocator<void> > skeleton_listenerRequest;

typedef boost::shared_ptr< ::skeleton_markers::skeleton_listenerRequest> skeleton_listenerRequestPtr;
typedef boost::shared_ptr< ::skeleton_markers::skeleton_listenerRequest const> skeleton_listenerRequestConstPtr;


template <class ContainerAllocator>
struct skeleton_listenerResponse_ {
  typedef skeleton_listenerResponse_<ContainerAllocator> Type;

  skeleton_listenerResponse_()
  : flag(false)
  {
  }

  skeleton_listenerResponse_(const ContainerAllocator& _alloc)
  : flag(false)
  {
  }

  typedef uint8_t _flag_type;
  uint8_t flag;


  typedef boost::shared_ptr< ::skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skeleton_markers::skeleton_listenerResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct skeleton_listenerResponse
typedef  ::skeleton_markers::skeleton_listenerResponse_<std::allocator<void> > skeleton_listenerResponse;

typedef boost::shared_ptr< ::skeleton_markers::skeleton_listenerResponse> skeleton_listenerResponsePtr;
typedef boost::shared_ptr< ::skeleton_markers::skeleton_listenerResponse const> skeleton_listenerResponseConstPtr;

struct skeleton_listener
{

typedef skeleton_listenerRequest Request;
typedef skeleton_listenerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct skeleton_listener
} // namespace skeleton_markers

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::skeleton_markers::skeleton_listenerRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3e922e898a4b808400fdf8dd80e96d0c";
  }

  static const char* value(const  ::skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3e922e898a4b8084ULL;
  static const uint64_t static_value2 = 0x00fdf8dd80e96d0cULL;
};

template<class ContainerAllocator>
struct DataType< ::skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "skeleton_markers/skeleton_listenerRequest";
  }

  static const char* value(const  ::skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string gesture\n\
int64 randomArr\n\
int64 randomGes\n\
\n\
";
  }

  static const char* value(const  ::skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::skeleton_markers::skeleton_listenerResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "24842bc754e0f5cc982338eca1269251";
  }

  static const char* value(const  ::skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x24842bc754e0f5ccULL;
  static const uint64_t static_value2 = 0x982338eca1269251ULL;
};

template<class ContainerAllocator>
struct DataType< ::skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "skeleton_markers/skeleton_listenerResponse";
  }

  static const char* value(const  ::skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool flag\n\
\n\
\n\
";
  }

  static const char* value(const  ::skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.gesture);
    stream.next(m.randomArr);
    stream.next(m.randomGes);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct skeleton_listenerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.flag);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct skeleton_listenerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<skeleton_markers::skeleton_listener> {
  static const char* value() 
  {
    return "82259b27ffa827b1104afbd12972f9e7";
  }

  static const char* value(const skeleton_markers::skeleton_listener&) { return value(); } 
};

template<>
struct DataType<skeleton_markers::skeleton_listener> {
  static const char* value() 
  {
    return "skeleton_markers/skeleton_listener";
  }

  static const char* value(const skeleton_markers::skeleton_listener&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "82259b27ffa827b1104afbd12972f9e7";
  }

  static const char* value(const skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "skeleton_markers/skeleton_listener";
  }

  static const char* value(const skeleton_markers::skeleton_listenerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "82259b27ffa827b1104afbd12972f9e7";
  }

  static const char* value(const skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "skeleton_markers/skeleton_listener";
  }

  static const char* value(const skeleton_markers::skeleton_listenerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SKELETON_MARKERS_SERVICE_SKELETON_LISTENER_H

